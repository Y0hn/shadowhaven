using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;

public class BtnManager : MonoBehaviour
{
    public RectTransform[] menus;

    private Dictionary<string, RectTransform> buttonsRect;
    private Dictionary<string, Button> buttons;
    private Dictionary<string, int> menusNames;
    private Dictionary<int, Vector2> menusPos;
    private Dictionary<string, int> menuBtns;

    // Animation
    private List <RectTransform> animatedMenu;
    private const float animationDur = 50f;
    public float animationSpeed = 50f;
    private List <Vector2> targetPos;
    private List <AlfaShade> shader;
    private List <bool> deactivate;
    private List <bool> moveX;

    void Start()
    {
        // References
        moveX = new();
        shader = new();
        buttons = new();
        menuBtns = new();
        menusPos = new();
        targetPos = new();
        menusNames = new();
        deactivate = new();
        buttonsRect = new();
        animatedMenu = new();
        for (int i = 0; i < menus.Length; i++)
        {
            RectTransform child = menus[i];
            List<Transform> grandChildren = new();
            for (int j = 0; j < child.childCount; j++)
                grandChildren.Add(child.GetChild(j));
            foreach (Transform grandChild in grandChildren)
            {
                try
                {
                    if (grandChild.name.Contains("B"))
                        grandChild.name = grandChild.name.Split('B')[0];
                    buttonsRect.Add(grandChild.name, grandChild.GetComponent<RectTransform>());
                    buttons.Add(grandChild.name, grandChild.GetComponent<Button>());
                    menuBtns.Add(grandChild.name, i);
                } catch { Debug.LogWarning("GrandChild: " + grandChild.name + " is not a button or is not compatible"); }
            }
            menusNames.Add(child.name, i);
            menusPos.Add(i, child.position);

            // Btn Setup
            child.position = new(- child.position.x - child.sizeDelta.x, child.position.y);
            child.gameObject.SetActive(false);
        }
    }

    void Update()
    {
        if (1 <= animatedMenu.Count)
        {
            foreach (RectTransform animated in animatedMenu)
            {
                int i = animatedMenu.IndexOf(animated);
                if (
                    ((animated.position.x < targetPos[i].x || animated.position.y < targetPos[i].y) && 0 < animationSpeed)
                        ||
                    ((animated.position.x > targetPos[i].x || animated.position.y > targetPos[i].y) && 0 > animationSpeed)
                    )
                {
                    if (moveX[i])
                        animated.position = new(animated.position.x + animationSpeed * Time.deltaTime, animated.position.y);
                    else
                        animated.position = new(animated.position.x, animated.position.y + animationSpeed * Time.deltaTime);

                    // Shading
                    animated.GetComponent<AlfaShade>().AddTransparency(1 / (animationDur / (animationSpeed * Time.deltaTime)));
                }
                else
                {
                    animated.gameObject.SetActive(!deactivate[i]);
                    animatedMenu.RemoveAt(i);
                    deactivate.RemoveAt(i);
                    targetPos.RemoveAt(i);
                    shader.RemoveAt(i);
                    moveX.RemoveAt(i);
                }
            }
        }
    }
    public void DisableBtn(string name)
    {
        try
        {
            buttons[name].interactable = false;
            Debug.Log("Disabled btn: " + name);
        } 
        catch 
        {
            string btns = "";

            string[] temp = { "" };
            if (buttonsRect != null)
                temp = buttonsRect.Keys.ToArray();
            if (!temp[0].Equals(string.Empty))

                foreach (string key in temp)
                {
                    btns += "\n" + key;
                }
            else
                btns = "[ is empty ]";

            Debug.LogWarning("Button " + name + " is not in Dictionaries (yet)\nList of Buttons:" + btns);
        }
    }
    public void EnDisMenu(string name)
    {
        int index = menusNames[name];
        animatedMenu.Add(menus[index]);
        int i = animatedMenu.IndexOf(menus[index]);

        Vector2 pos = animatedMenu[i].transform.position;
        shader.Add(animatedMenu[i].GetComponent<AlfaShade>());
        moveX.Add(true);

        if (animatedMenu[i].gameObject.activeSelf)
        {
            animationSpeed = -Mathf.Abs(animationSpeed);
            if (moveX[i])
                targetPos.Add(new(pos.x - animationDur, pos.y));
            else
                targetPos.Add(new(pos.x, pos.y - animationDur));

            Debug.Log("Disambling " + name);
            shader[i].SetTransparency(1f);
            deactivate.Add(true);
        }
        else
        {
            animationSpeed = Mathf.Abs(animationSpeed);
            targetPos.Add(pos);

            if (moveX[i])
                animatedMenu[i].position = new(pos.x - animationDur, pos.y);
            else
                animatedMenu[i].position = new(pos.x, pos.y - animationDur);
            animatedMenu[i].gameObject.SetActive(true);

            Debug.Log("Enabling " + name);
            shader[i].SetTransparency(0f);
            deactivate.Add(false);
        }
    }
    public void EnDisMenu(string name, bool enable)
    {
        int index = menusNames[name];
        animatedMenu.Add(menus[index]);
        int i = animatedMenu.IndexOf(menus[index]);

        Vector2 pos = animatedMenu[i].transform.position;

        if      (!enable && animatedMenu[i].gameObject.activeSelf)
        {
            animationSpeed = -Mathf.Abs(animationSpeed);
            if (moveX[i])
                targetPos.Add( new(pos.x - animationDur, pos.y));
            else
                targetPos.Add( new(pos.x, pos.y - animationDur));

            Debug.Log("Disambling " + name);
            shader.Add(animatedMenu[i].GetComponent<AlfaShade>());
            shader[i].SetTransparency(1f);
            deactivate[i] = true;
            moveX.Add(true);
        }
        else if (enable && !animatedMenu[i].gameObject.activeSelf)
        {
            animationSpeed = Mathf.Abs(animationSpeed);
            targetPos.Add(pos);

            if (moveX[i])
                animatedMenu[i].position = new(pos.x - animationDur, pos.y);
            else
                animatedMenu[i].position = new(pos.x, pos.y - animationDur);
            animatedMenu[i].gameObject.SetActive(true);

            Debug.Log("Enabling " + name);
            shader.Add(animatedMenu[i].GetComponent<AlfaShade>());
            shader[i].SetTransparency(0f);
            deactivate[i] = false;
            moveX.Add(true);
        }
        else
        {
            animatedMenu.RemoveAt(i);
            return;
        }
    }
}